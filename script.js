/* ---------------------------------
   Z√°kladn√≠ konfigurace
-----------------------------------*/
const CLOUDINARY_UPLOAD_URL = "https://api.cloudinary.com/v1_1/drrzl7evt/auto/upload";
const CLOUDINARY_UPLOAD_PRESET = "AKR_Preset";

/* ---------------------------------
   Promƒõnn√©
-----------------------------------*/
let photos = [];
let selectedShop = null;
let categories = [];

/* ---------------------------------
   DOM prvky
-----------------------------------*/
const shopZvoleBtn = document.getElementById("shop-zvole");
const shopMoraBtn = document.getElementById("shop-mora");
const photoInput = document.getElementById("photo-input");
const takePhotoBtn = document.getElementById("take-photo-btn");
const photoCountElem = document.getElementById("photo-count");
const statusElem = document.getElementById("status");
const dailyCountElem = document.getElementById("daily-count");

const shopSelectionSection = document.getElementById("shop-selection");
const photoSectionSection = document.getElementById("photo-section");
const productDetailsSection = document.getElementById("product-details");
const finishSection = document.getElementById("finish-section");

const categoryBtn = document.getElementById("category-btn");
const categoryBtnText = document.getElementById("category-btn-text");
const categoryIdInput = document.getElementById("category-id");
const categoryModal = document.getElementById("category-modal");
const categorySearch = document.getElementById("category-search");
const categoryList = document.getElementById("category-list");
const categoryCloseBtn = document.getElementById("category-close-btn");

const progressBar = document.getElementById("progress-bar");

const confirmModal = document.getElementById("confirm-modal");
const confirmYesBtn = document.getElementById("confirm-yes");
const confirmNoBtn = document.getElementById("confirm-no");

const finishBtn = document.getElementById("finish-btn");
const resetBtn = document.getElementById("reset-btn");

const exitModal = document.getElementById("exit-modal");
const deleteDataBtn = document.getElementById("delete-data-btn");
const closeModalBtn = document.getElementById("close-modal-btn");

const shippingMethodSelect = document.getElementById("shippingMethod");

/* ---------------------------------
   Naƒçten√≠ kategori√≠ (MapaKat.txt)
-----------------------------------*/
fetch("MapaKat.txt")
  .then((response) => response.text())
  .then((text) => {
    categories = text
      .split("\n")
      .filter((line) => line.trim())
      .map((line) => {
        const match = line.match(/(.*)\((\d+)\)/);
        return match
          ? { name: match[1].trim(), id: parseInt(match[2]) }
          : null;
      })
      .filter((cat) => cat);
  })
  .catch((err) => {
    console.error("Chyba p≈ôi naƒç√≠t√°n√≠ kategori√≠:", err);
  });

/* ---------------------------------
   Pomocn√© funkce
-----------------------------------*/
function updateStatus(message) {
  statusElem.textContent = message;
  // Kdykoli zmƒõn√≠me status, zaktualizujeme i "dnes p≈ôid√°no"
  updateDailyCountDisplay();
}

// Vr√°t√≠ YYYY-MM-DD
function getTodayDateString() {
  const now = new Date();
  return now.toISOString().split("T")[0];
}

// Aktualizace denn√≠ho poƒçtu p≈ôidan√Ωch produkt≈Ø
function updateDailyCountDisplay() {
  const products = JSON.parse(localStorage.getItem("products")) || [];
  const todayStr = getTodayDateString();
  let dailyCount = 0;
  products.forEach((p) => {
    if (p.dateAdded === todayStr) {
      dailyCount++;
    }
  });
  dailyCountElem.textContent = `(Dnes p≈ôid√°no: ${dailyCount} produkt≈Ø)`;
}

// Zobraz√≠ historii um√≠stƒõn√≠
function updateLocationHistory() {
  const locationHistoryDiv = document.getElementById("location-history");
  const locations = JSON.parse(localStorage.getItem("locationHistory")) || [];
  if (locations.length === 0) {
    locationHistoryDiv.textContent = "≈Ω√°dn√° historie um√≠stƒõn√≠.";
  } else {
    const items = locations
      .map(
        (loc) =>
          `<span class="has-text-link" style="cursor:pointer" onclick="document.getElementById('product-location').value='${loc}'">${loc}</span>`
      )
      .join(", ");
    locationHistoryDiv.innerHTML = "Historie: " + items;
  }
}

// Zobrazen√≠ Bulma mod√°lu
function openModal(modalElem) {
  modalElem.classList.add("is-active");
}
// Zav≈ôen√≠ Bulma mod√°lu
function closeModal(modalElem) {
  modalElem.classList.remove("is-active");
}

/* ---------------------------------
   Inicializace
-----------------------------------*/
updateStatus("üëâ Zaƒçni v√Ωbƒõrem obchodu");
updateDailyCountDisplay();

/* ---------------------------------
   V√Ωbƒõr obchodu
-----------------------------------*/
shopZvoleBtn.addEventListener("click", () => {
  selectedShop = "Z";
  shopSelectionSection.classList.add("is-hidden");
  photoSectionSection.classList.remove("is-hidden");
  updateStatus("üëâ Vybral jsi Antik Zvole. Nahoƒè prvn√≠ fotku!");
});

shopMoraBtn.addEventListener("click", () => {
  selectedShop = "M";
  shopSelectionSection.classList.add("is-hidden");
  photoSectionSection.classList.remove("is-hidden");
  updateStatus("üëâ Vybral jsi Antik Mora. Nahoƒè prvn√≠ fotku!");
});

/* ---------------------------------
   Focen√≠ 3 fotek
-----------------------------------*/
takePhotoBtn.addEventListener("click", () => {
  if (photos.length < 3) {
    photoInput.click();
  } else {
    updateStatus("‚úÖ M√°≈° u≈æ 3 fotky! Vypl≈à n√°zev a cenu.");
  }
});

photoInput.addEventListener("change", () => {
  if (photoInput.files.length) {
    photos.push(photoInput.files[0]);
    photoCountElem.textContent = `${photos.length}/3`;
    photoInput.value = "";
    updateStatus(
      `üì∏ Nafocena fotka ${photos.length}/3. ${
        photos.length < 3
          ? "Pokraƒçuj dal≈°√≠ fotkou."
          : "Vypl≈à n√°zev a cenu."
      }`
    );
    if (photos.length === 3) {
      photoSectionSection.classList.add("is-hidden");
      productDetailsSection.classList.remove("is-hidden");
      takePhotoBtn.disabled = true;
      updateLocationHistory();
    }
  }
});

/* ---------------------------------
   V√Ωbƒõr kategorie
-----------------------------------*/
categoryBtn.addEventListener("click", () => {
  openModal(categoryModal);
  categorySearch.value = "";
  updateCategoryList("");
});

categorySearch.addEventListener("input", () => {
  const query = categorySearch.value.toLowerCase().trim();
  updateCategoryList(query);
});

function updateCategoryList(query) {
  categoryList.innerHTML = "";
  const filtered = categories
    .filter((cat) => cat.name.toLowerCase().includes(query))
    .sort((a, b) => {
      const aIndex = a.name.toLowerCase().indexOf(query);
      const bIndex = b.name.toLowerCase().indexOf(query);
      return aIndex - bIndex || a.name.localeCompare(b.name);
    });

  if (filtered.length === 0) {
    const noResult = document.createElement("p");
    noResult.classList.add("has-text-grey");
    noResult.innerText = "≈Ω√°dn√© kategorie nenalezeny.";
    categoryList.appendChild(noResult);
    return;
  }

  filtered.forEach((cat) => {
    const btn = document.createElement("button");
    btn.innerHTML = cat.name;
    btn.style.width = "100%";
    btn.style.textAlign = "left";
    btn.style.border = "none";
    btn.style.background = "none";
    btn.style.padding = "0.75rem";
    btn.onmouseover = () => (btn.style.backgroundColor = "#f2f2f2");
    btn.onmouseout = () => (btn.style.backgroundColor = "");
    btn.onclick = () => {
      categoryIdInput.value = cat.id;
      // Po≈æadavek: zobrazit jen text "VYBR√ÅNO"
      categoryBtnText.textContent = "VYBR√ÅNO";
      updateStatus("‚úÖ Kategorie vybr√°na!");
      closeModal(categoryModal);
    };
    categoryList.appendChild(btn);
  });
}

categoryCloseBtn.addEventListener("click", () => {
  closeModal(categoryModal);
});

/* ---------------------------------
   Upload souboru na Cloudinary
-----------------------------------*/
async function uploadFile(file) {
  const formData = new FormData();
  formData.append("file", file);
  formData.append("upload_preset", CLOUDINARY_UPLOAD_PRESET);
  formData.append("folder", "media_library");

  const resp = await fetch(CLOUDINARY_UPLOAD_URL, {
    method: "POST",
    body: formData
  });
  if (!resp.ok) {
    const errorText = await resp.text();
    throw new Error(`Chyba p≈ôi nahr√°v√°n√≠: ${resp.status} - ${errorText}`);
  }
  const data = await resp.json();
  return data.secure_url;
}

/* ---------------------------------
   P≈ôid√°n√≠ produktu
-----------------------------------*/
async function addProduct() {
  const name = document.getElementById("product-name").value.trim();
  const price = document.getElementById("product-price").value.trim();
  const categoryId = categoryIdInput.value.trim();
  const location = document.getElementById("product-location").value.trim();
  const shippingId = shippingMethodSelect.value;

  if (!name || !price || !categoryId || !shippingId) {
    updateStatus(
      "‚ö†Ô∏è Vypl≈à n√°zev, cenu, kategorii a dopravu!"
    );
    return;
  }

  updateStatus("‚è≥ Zpracov√°v√°m a nahr√°v√°m fotky...");
  progressBar.classList.remove("is-hidden");
  progressBar.value = 0;

  try {
    const photoUrls = [];
    for (let i = 0; i < photos.length; i++) {
      updateStatus(`üñºÔ∏è Nahr√°v√°m obr√°zek ${i + 1}/3...`);
      const url = await uploadFile(photos[i]);
      photoUrls.push(url);
      const percent = Math.round(((i + 1) / photos.length) * 100);
      progressBar.value = percent;
      updateStatus(`üì§ Nahr√°n obr√°zek ${i + 1}/3...`);
    }

    // Ulo≈æen√≠ um√≠stƒõn√≠ do localStorage
    if (location) {
      let locationHistory = JSON.parse(localStorage.getItem("locationHistory")) || [];
      if (!locationHistory.includes(location)) {
        locationHistory.push(location);
        localStorage.setItem("locationHistory", JSON.stringify(locationHistory));
      }
    }

    // Generov√°n√≠ entityId
    let lastEntityId = parseInt(localStorage.getItem("lastEntityId")) || 0;
    lastEntityId += 1;
    localStorage.setItem("lastEntityId", lastEntityId);

    function getRoundedISODate() {
      let d = new Date();
      d.setUTCMinutes(0, 0, 0);
      d.setUTCHours(d.getUTCHours() + 1);
      return d.toISOString().replace(".000Z", "Z");
    }

    const productDescription = `<div><h3><strong>üõí NAB√çZEN√â ZBO≈Ω√ç üéÅ</strong></h3><p>Stav viz. fotografie üì∏</p><p><strong>Pro dotazy preferuji komunikaci e-mailem.</strong></p></div>`;

    const formattedName = `${name.toUpperCase()} | [${selectedShop}]`;
    const todayStr = getTodayDateString();

    const product = {
      entityId: lastEntityId,
      name: formattedName,
      language: "cs-CZ",
      extId: location,
      categoryId: parseInt(categoryId),
      description: productDescription,
      auctionPriceAmount: parseInt(price),
      auctionPriceCurrency: "CZK",
      buyNowPriceAmount: 0,
      buyNowPriceCurrency: "CZK",
      quantity: 1,
      quantityUnit: "pieces",
      startingAt: getRoundedISODate(),
      duration: 7,
      reexposeType: 0,
      location: JSON.stringify({
        countryCode: "CZ",
        postCode: "789 01",
        city: "Zvole"
      }),
      shippingTemplateId: parseInt(shippingId),
      shippingPayer: "buyer",
      images: photoUrls.join(" "),
      bestOffer: 1,
      onlyVerifiedBuyersEnabledOverride: 0,
      attributes: JSON.stringify(),
      dateAdded: todayStr
    };

    let products = JSON.parse(localStorage.getItem("products")) || [];
    products.push(product);
    localStorage.setItem("products", JSON.stringify(products));

    // Reset
    photos = [];
    photoCountElem.textContent = "0/3";
    document.getElementById("product-name").value = "";
    document.getElementById("product-price").value = "";
    document.getElementById("product-location").value = "";
    categoryIdInput.value = "";
    categoryBtnText.textContent = "Vybrat kategorii";
    shippingMethodSelect.value = "";

    productDetailsSection.classList.add("is-hidden");
    finishSection.classList.remove("is-hidden");
    takePhotoBtn.disabled = false;

    updateStatus("üéâ Produkt p≈ôid√°n! M≈Ø≈æe≈° dokonƒçit nebo p≈ôidat dal≈°√≠.");
  } catch (error) {
    updateStatus(`‚ùå Chyba p≈ôi nahr√°v√°n√≠ fotek: ${error.message}`);
  }
}

/* ---------------------------------
   P≈ôidat dal≈°√≠ produkt
-----------------------------------*/
function addAnotherProduct() {
  // Reset progress bar pro nov√Ω produkt
  progressBar.value = 0;
  progressBar.classList.add("is-hidden");

  finishSection.classList.add("is-hidden");
  photoSectionSection.classList.remove("is-hidden");
  updateStatus("üëâ Nafo≈• fotky pro dal≈°√≠ produkt.");
}

/* ---------------------------------
   Dokonƒçen√≠ ‚Äì export do Excelu, WhatsApp
-----------------------------------*/
async function finish() {
  const confirmed = await showConfirmModal();
  if (!confirmed) return;

  const products = JSON.parse(localStorage.getItem("products")) || [];
  const savedProductsDiv = document.getElementById("saved-products");
  savedProductsDiv.innerHTML = "";

  if (products.length === 0) {
    savedProductsDiv.innerHTML = "<p>≈Ω√°dn√© produkty nebyly p≈ôid√°ny. üòï</p>";
    updateStatus("‚ö†Ô∏è P≈ôidej aspo≈à jeden produkt p≈ôed dokonƒçen√≠m.");
    return;
  }

  const headers = [
    "entityId",
    "name",
    "language",
    "extId",
    "categoryId",
    "description",
    "auctionPriceAmount",
    "auctionPriceCurrency",
    "buyNowPriceAmount",
    "buyNowPriceCurrency",
    "quantity",
    "quantityUnit",
    "startingAt",
    "duration",
    "reexposeType",
    "location",
    "shippingTemplateId",
    "shippingPayer",
    "images",
    "bestOffer",
    "onlyVerifiedBuyersEnabledOverride",
    "attributes"
  ];

  const data = products.map((p) => ({
    entityId: p.entityId,
    name: p.name,
    language: p.language,
    extId: p.extId,
    categoryId: p.categoryId,
    description: p.description,
    auctionPriceAmount: p.auctionPriceAmount,
    auctionPriceCurrency: p.auctionPriceCurrency,
    buyNowPriceAmount: p.buyNowPriceAmount,
    buyNowPriceCurrency: p.buyNowPriceCurrency,
    quantity: p.quantity,
    quantityUnit: p.quantityUnit,
    startingAt: p.startingAt,
    duration: p.duration,
    reexposeType: p.reexposeType,
    location: p.location,
    shippingTemplateId: p.shippingTemplateId,
    shippingPayer: p.shippingPayer,
    images: p.images,
    bestOffer: p.bestOffer,
    onlyVerifiedBuyersEnabledOverride: p.onlyVerifiedBuyersEnabledOverride,
    attributes: p.attributes
  }));

  const worksheet = XLSX.utils.json_to_sheet(data, { header: headers });
  const workbook = XLSX.utils.book_new();
  XLSX.utils.book_append_sheet(workbook, worksheet, "Products");

  try {
    updateStatus("‚è≥ Nahr√°v√°m Excel na server...");
    const excelBuffer = XLSX.write(workbook, {
      bookType: "xlsx",
      type: "array"
    });
    const blob = new Blob([excelBuffer], {
      type: "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
    });
    const file = new File(
      [blob],
      `products_${Date.now()}.xlsx`,
      {
        type: "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
      }
    );

    const excelUrl = await uploadFile(file);

    // Zkop√≠rov√°n√≠ odkazu do schr√°nky
    navigator.clipboard.writeText(excelUrl).then(
      () => {
        updateStatus("‚úÖ Odkaz zkop√≠rov√°n do schr√°nky!");
      },
      (err) => {
        updateStatus("‚ùå Chyba p≈ôi kop√≠rov√°n√≠ odkazu: " + err);
      }
    );

    // Otev≈ôen√≠ WhatsApp
    const whatsappUrl = `whatsapp://send?text=Zde je vygenerovan√Ω Excel soubor: ${encodeURIComponent(excelUrl)}`;
    window.location.href = whatsappUrl;

    savedProductsDiv.innerHTML =
      "<p>Soubor byl nahr√°n a odkaz zkop√≠rov√°n. Otev≈ôi WhatsApp a ode≈°li zpr√°vu.</p>";
  } catch (error) {
    updateStatus(`‚ùå Chyba p≈ôi nahr√°v√°n√≠ Excelu: ${error.message}`);
  }
}

/* ---------------------------------
   Reset √∫lo≈æi≈°tƒõ
-----------------------------------*/
async function resetStorage() {
  const confirmed = await showConfirmModal();
  if (!confirmed) return;

  localStorage.clear();
  photos = [];
  selectedShop = null;
  photoCountElem.textContent = "0/3";
  document.getElementById("product-name").value = "";
  document.getElementById("product-price").value = "";
  document.getElementById("product-location").value = "";
  categoryIdInput.value = "";
  categoryBtnText.textContent = "Vybrat kategorii";
  shippingMethodSelect.value = "";
  progressBar.value = 0;
  progressBar.classList.add("is-hidden");

  productDetailsSection.classList.add("is-hidden");
  photoSectionSection.classList.add("is-hidden");
  finishSection.classList.add("is-hidden");
  shopSelectionSection.classList.remove("is-hidden");
  takePhotoBtn.disabled = false;
  document.getElementById("saved-products").innerHTML = "";

  updateStatus("üßπ Data byla vymaz√°na! Zaƒçni znovu.");
}

/* ---------------------------------
   Navigace mezi kroky
-----------------------------------*/
const steps = [
  shopSelectionSection,
  photoSectionSection,
  productDetailsSection,
  finishSection
];

document.querySelectorAll(".nav-btn").forEach((btn) => {
  btn.addEventListener("click", () => {
    const currentStep = parseInt(btn.dataset.step, 10);
    const isNext = btn.classList.contains("next-btn");
    const newStep = isNext ? currentStep + 1 : currentStep - 1;

    if (newStep >= 0 && newStep < steps.length) {
      // Kontrola 3 fotek
      if (currentStep === 1 && isNext && photos.length < 3) {
        updateStatus("‚ö†Ô∏è Mus√≠≈° nafotit 3 fotky, ne≈æ p≈ôejde≈° d√°l!");
        return;
      }
      // Kontrola vyplnƒõn√≠
      if (currentStep === 2 && isNext) {
        const name = document.getElementById("product-name").value.trim();
        const price = document.getElementById("product-price").value.trim();
        const categoryId = categoryIdInput.value.trim();
        const shippingId = shippingMethodSelect.value;
        if (!name || !price || !categoryId || !shippingId) {
          updateStatus(
            "‚ö†Ô∏è Vypl≈à n√°zev, cenu, kategorii a dopravu, ne≈æ p≈ôejde≈° d√°l!"
          );
          return;
        }
      }

      steps[currentStep].classList.add("is-hidden");
      steps[newStep].classList.remove("is-hidden");
      updateStatus(`üëâ P≈ôepnuto na krok ƒç. ${newStep + 1}`);
    }
  });
});

/* ---------------------------------
   Potvrzovac√≠ mod√°l ANO/NE
-----------------------------------*/
function showConfirmModal() {
  openModal(confirmModal);
  return new Promise((resolve) => {
    confirmYesBtn.onclick = () => {
      closeModal(confirmModal);
      resolve(true);
    };
    confirmNoBtn.onclick = () => {
      closeModal(confirmModal);
      resolve(false);
    };
  });
}

/* ---------------------------------
   Mod√°l pro odchod
-----------------------------------*/
window.addEventListener("beforeunload", (e) => {
  openModal(exitModal);
  e.preventDefault();
  e.returnValue = "";
});

deleteDataBtn.addEventListener("click", () => {
  resetStorage();
  closeModal(exitModal);
  updateStatus("üßπ Data vymaz√°na p≈ôi odchodu!");
  setTimeout(() => window.location.reload(), 1000);
});

closeModalBtn.addEventListener("click", () => {
  closeModal(exitModal);
});

/* ---------------------------------
   Propojen√≠ tlaƒç√≠tek
-----------------------------------*/
finishBtn.addEventListener("click", finish);
resetBtn.addEventListener("click", resetStorage);
